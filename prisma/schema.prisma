// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id  String @id @default(uuid())
  email    String
  password String
  role     String // Use enum or predefined roles

  first_name   String
  last_name    String
  phone        String
  address      String
  preferences  String
  profileimage String

  bookings     Booking[]
  reviews      Review[]
  feedbacks    Feedback[]
  Notification Notification[]
  Admin        Admin?

  @@map("user")
}

model Admin {
  admin_id String @id @default(uuid())
  user_id  String @unique

  contents Content[]

  user User @relation(fields: [user_id], references: [user_id])

  @@map("admin")
}

model Service {
  service_id   String @id @default(uuid())
  servicename  String
  category     String
  description  String
  price        Float
  availability String
  providerid   Int

  bookings     Booking[]
  Review       Review[]
  adminAdminid Int?

  @@map("service")
}

model Booking {
  bookingid   Int      @id @default(autoincrement())
  user_id     String
  service_id  String
  bookingdate DateTime
  bookingtime String
  status      String

  user    User    @relation(fields: [user_id], references: [user_id])
  service Service @relation(fields: [service_id], references: [service_id])

  @@map("booking")
}

model Review {
  reviewid   Int      @id @default(autoincrement())
  user_id    String
  service_id String
  rating     Int
  comment    String
  reviewdate DateTime

  user    User    @relation(fields: [user_id], references: [user_id])
  service Service @relation(fields: [service_id], references: [service_id])

  @@map("review")
}

model Feedback {
  feedbackid   Int      @id @default(autoincrement())
  user_id      String
  subject      String
  comment      String
  feedbackdate DateTime

  user User @relation(fields: [user_id], references: [user_id])

  @@map("feedback")
}

model Notification {
  notificationid Int      @id @default(autoincrement())
  user_id        String
  message        String
  date           DateTime
  status         String
  user           User     @relation(fields: [user_id], references: [user_id])

  @@map("notification")
}

model Content {
  contentid Int    @id @default(autoincrement())
  title     String
  body      String
  type      String
  admin_id  String

  author Admin @relation(fields: [admin_id], references: [admin_id])

  @@map("content")
}
